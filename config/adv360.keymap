
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

#define LEFT_HAND_KEYS 0 1 2 3 4 5 6 \
                  14 15 16 17 18 19 20 \
                  28 29 30 31 32 33 34 \
                  46 47 48 49 50 51 \
                  66 67 68 69 70

#define RIGHT_HAND_KEYS 7 8 9 10 11 12 13 \
                   21 22 23 24 25 26 27 \
                   39 40 41 42 43 44 45 \
                   60 61 62 63 64 65 \
                   77 78 79 80 81

#define LEFT_HAND_THUMB_KEYS 35 36 54 71 72 73

#define RIGHT_HAND_THUMB_KEYS 37 38 57 74 75 76

#define THUMB_KEYS LEFT_HAND_THUMB_KEYS RIGHT_HAND_THUMB_KEYS

//&lt {
//    quick-tap-ms = <300>;
//    global-quick-tap;
//};

/ {
    behaviors {
        #ifndef HOME_ROW_HOLDING_TYPE
        #define HOME_ROW_HOLDING_TYPE "tap-preferred"
        #endif
        #ifndef HOME_ROW_HOLDING_TIME
        #define HOME_ROW_HOLDING_TIME 270 // TAPPING_TERM + ALLOW_CROSSOVER_AFTER
        #endif
        #ifndef HOME_ROW_STREAK_DECAY
        #define HOME_ROW_STREAK_DECAY 170 // global-quick-tap-ms
        #endif
        #ifndef HOME_ROW_REPEAT_DECAY
        #define HOME_ROW_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
        #endif
        #ifndef SHIFT_HOLDING_TYPE
        #define SHIFT_HOLDING_TYPE "tap-preferred"
        #endif
        #ifndef SHIFT_HOLDING_TIME
        #define SHIFT_HOLDING_TIME 170
        #endif
        #ifndef SHIFT_STREAK_DECAY
        #define SHIFT_STREAK_DECAY 70 // global-quick-tap-ms
        #endif
        #ifndef SHIFT_REPEAT_DECAY
        #define SHIFT_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
        #endif
        #ifndef THUMB_HOLDING_TYPE
        #define THUMB_HOLDING_TYPE "balanced"
        #endif
        #ifndef THUMB_HOLDING_TIME
        #define THUMB_HOLDING_TIME 200
        #endif
        #ifndef THUMB_REPEAT_DECAY
        #define THUMB_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
        #endif
        #ifndef SPACE_HOLDING_TIME
        #define SPACE_HOLDING_TIME 170
        #endif
        #ifndef SPACE_REPEAT_DECAY
        #define SPACE_REPEAT_DECAY 200 // "tap then hold" for key auto-repeat
        #endif

        #include "macros.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            #flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
/*
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        };
*/
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_LEFT_HAND";
            flavor = HOME_ROW_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <HOME_ROW_HOLDING_TIME>;
            quick-tap-ms = <HOME_ROW_REPEAT_DECAY>;
            require-prior-idle-ms = <HOME_ROW_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_RIGHT_HAND";
            flavor = HOME_ROW_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <HOME_ROW_HOLDING_TIME>;
            quick-tap-ms = <HOME_ROW_REPEAT_DECAY>;
            require-prior-idle-ms = <HOME_ROW_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        hm_shift_left: miryoku_home_row_mods_left_shift_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_LEFT_SHIFT_SHIFT";
            flavor = SHIFT_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            //hold-trigger-on-release; // don't wait for other mods
            tapping-term-ms = <SHIFT_HOLDING_TIME>;
            quick-tap-ms = <SHIFT_REPEAT_DECAY>;
            require-prior-idle-ms = <SHIFT_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        hm_shift_right: miryoku_home_row_mods_right_shift_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_RIGHT_SHIFT_SHIFT";
            flavor = SHIFT_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            //hold-trigger-on-release; // don't wait for other mods
            tapping-term-ms = <SHIFT_HOLDING_TIME>;
            quick-tap-ms = <SHIFT_REPEAT_DECAY>;
            require-prior-idle-ms = <SHIFT_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        thumb: miryoku_thumb_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "MIRYOKU_THUMB_LAYER";
            flavor = THUMB_HOLDING_TYPE;
            tapping-term-ms = <THUMB_HOLDING_TIME>;
            quick-tap-ms = <THUMB_REPEAT_DECAY>; // enable repeat
            //global-quick-tap; // no typing streak
            //retro-tap; // don't allow slow (hold-like) taps
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };

        space: miryoku_thumb_layer_spacebar {
            compatible = "zmk,behavior-hold-tap";
            label = "MIRYOKU_THUMB_LAYER_SPACEBAR";
            flavor = THUMB_HOLDING_TYPE;
            tapping-term-ms = <SPACE_HOLDING_TIME>;
            quick-tap-ms = <SPACE_REPEAT_DECAY>; // enable repeat
            //global-quick-tap; // no typing streak
            retro-tap; // allow slow (hold-like) taps
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };
        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };
    };

    // Home row mods
    #define _F_SFT &hm_shift_left LSHFT F  // Shift on index fingers
    #define _J_SFT &hm_shift_right RSHFT J
    #define _D_CTRL &hm_l LCTRL D   // Command on middle fingers
    #define _K_CTRL &hm_r RCTRL K
    #define _S_ALT &hm_l LALT S  // Control on index down
    #define _L_ALT &hm_r RALT L
    #define _A_CMD &hm_l LGUI A   // Option on ring finger
    #define _SEMI_CMD &hm_r RGUI SEMI

    keymap {
        compatible = "zmk,keymap";


        mac_layer {
            bindings = <
        &kp GRAVE     &kp N1  &kp N2  &kp N3  &kp N4  &kp N5                    &to 1                                                                  &mo 5  &kp N6  &kp N7     &kp N8    &kp N9    &kp N0  &kp MINUS
          &kp TAB      &kp Q   &kp W   &kp E   &kp R   &kp T                     &none                                                                  &none   &kp Y   &kp U      &kp I     &kp O     &kp P   &kp BACKSPACE
 &mt LCTRL ESCAPE      _A_CMD   _S_ALT   _D_CTRL   _F_SFT   &kp G                     &none     &kp DELETE  &kp LALT                   &kp LGUI  &kp RCTRL   &none   &kp H   _J_SFT      _K_CTRL     _L_ALT  _SEMI_CMD    &kp SQT
        &kp LSHFT      &kp Z   &kp X   &kp C   &kp V   &kp B                                           &kp HOME                  &kp PG_UP                      &kp N   &kp M  &kp COMMA   &kp DOT  &kp FSLH  &kp RSHFT
         &kp RALT  &kp EQUAL   &none   &none   &none                    &mt LGUI ENTER  &kp BACKSPACE   &kp END                  &kp PG_DN   &mo 4  &kp SPACE        &none      &none  &kp LBKT  &kp RBKT      &kp BSLH
            >;
        };

        windows_layer {
            bindings = <
        &kp GRAVE     &kp N1  &kp N2  &kp N3  &kp N4  &kp N5                    &to 2                                                                   &mo 5  &kp N6  &kp N7     &kp N8    &kp N9    &kp N0  &kp MINUS
          &kp TAB      &kp Q   &kp W   &kp E   &kp R   &kp T                     &none                                                                  &none   &kp Y   &kp U      &kp I     &kp O     &kp P   &kp BACKSPACE
 &mt LCTRL ESCAPE      _A_CMD   _S_ALT   _D_CTRL   _F_SFT   &kp G                     &none     &kp DELETE  &kp LALT                   &kp LGUI  &kp RCTRL   &none   &kp H   _J_SFT      _K_CTRL     _L_ALT  _SEMI_CMD    &kp SQT
        &kp LSHFT      &kp Z   &kp X   &kp C   &kp V   &kp B                                           &kp HOME                  &kp PG_UP                      &kp N   &kp M  &kp COMMA   &kp DOT  &kp FSLH  &kp RSHFT
         &kp RALT  &kp EQUAL   &none   &none   &none                    &mt LCTRL ENTER  &kp BACKSPACE   &kp END                  &kp PG_DN   &mo 4  &kp SPACE        &none      &none  &kp LBKT  &kp RBKT      &kp BSLH
            >;
        };
        
        gaming_layer {
            bindings = <
        &kp GRAVE     &kp N1  &kp N2  &kp N3  &kp N4  &kp N5                    &to 0                                                                  &mo 5  &kp N6  &kp N7     &kp N8    &kp N9    &kp N0  &kp MINUS
        &kp TAB &kp TAB      &kp Q   &kp W   &kp E   &kp R   &kp T                                                                                       &none   &kp Y   &kp U      &kp I     &kp O     &kp P   &kp BACKSPACE
        &mt LCTRL ESCAPE    &mt LCTRL ESCAPE      &kp A   &kp S   &kp D   &kp F   &kp G                       &kp LALT                   &kp LGUI  &kp RCTRL   &none   &kp H   _J_SFT      _K_CTRL     _L_ALT  _SEMI_CMD    &kp SQT
        &kp LSHFT &kp LSHFT      &kp Z   &kp X   &kp C   &kp V   &kp B                                           &kp HOME                  &kp PG_UP                      &kp N   &kp M  &kp COMMA   &kp DOT  &kp FSLH  &kp RSHFT
         &kp RCTRL  &kp EQUAL   &none   &none   &none                    &kp SPACE   &kp ENTER   &kp END                  &kp PG_DN   &kp BACKSPACE  &kp ENTER        &none      &none  &kp LBKT  &kp RBKT      &kp BSLH
            >;
        };
       
        layer_keypad {
            bindings = <
 &kp EQUAL     &kp N1    &kp N2    &kp N3     &kp N4  &kp N5              &trans                                                                 &mo 5  &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
   &kp TAB      &kp Q     &kp W     &kp E      &kp R   &kp T               &none                                                                 &none   &kp Y   &kp KP_N7     &kp KP_N8      &kp KP_N9     &kp KP_MINUS   &kp BSLH
   &kp ESC      &kp A     &kp S     &kp D      &kp F   &kp G               &none  &kp LCTRL  &kp LALT                   &kp LGUI  &kp RCTRL      &none   &kp H   &kp KP_N4     &kp KP_N5      &kp KP_N6      &kp KP_PLUS    &kp SQT
 &kp LSHFT      &kp Z     &kp X     &kp C      &kp V   &kp B                                 &kp HOME                  &kp PG_UP                         &kp N   &kp KP_N1     &kp KP_N2      &kp KP_N3     &kp KP_ENTER  &kp RSHFT
     &mo 2  &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT                    &kp BSPC    &kp DEL   &kp END                  &kp PG_DN  &kp ENTER  &kp KP_N0              &kp UP      &kp DOWN     &kp KP_DOT         &kp RBKT      &mo 2
            >;
        };

        layer_fn {
            bindings = <
 &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6            &tog 1                                                   &mo 5  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
 &trans  &trans  &trans  &kp LC(UP)  &trans  &trans             &none                                                   &none  &trans  &kp LA(LEFT)  &kp UP   &kp LA(RIGHT)   &trans   &trans
 &trans  &trans  &kp LC(LEFT)  &kp LC(DOWN)  &kp LC(RIGHT)  &trans             &none  &trans  &trans                  &trans  &trans   &none  &kp LG(LEFT)  &kp LEFT  &kp DOWN   &kp RIGHT   &kp LG(RIGHT)   &trans
 &trans  &trans  &trans  &trans  &trans  &trans                            &trans                  &trans                  &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans                  &trans  &trans  &trans          &trans  &trans   &trans   &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
  &sys_reset  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &none                                                                          &trans   &none       &none       &none   &none   &none   &sys_reset
  &none         &none         &none         &none         &none         &none            &bootloader                                                                     &bootloader   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none         &none                  &none   &none   &none                  &bt BT_CLR       &none  &rgb_ug RGB_MEFS_CMD 5   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none    &macro_ver         &none                                  &none                       &none                                       &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none                                &none   &none   &none                       &none  &bl BL_TOG         &rgb_ug RGB_TOG          &bl BL_INC  &bl BL_DEC   &none   &none   &none
            >;
        };

    };
};
